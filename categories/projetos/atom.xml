<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: projetos | 1up4developers]]></title>
  <link href="http://1up4dev.org/categories/projetos/atom.xml" rel="self"/>
  <link href="http://1up4dev.org/"/>
  <updated>2013-09-20T00:13:10-03:00</updated>
  <id>http://1up4dev.org/</id>
  <author>
    <name><![CDATA[1up4developers authors]]></name>
    <email><![CDATA[1up4dev@googlegroups.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[O que eu aprendi escrevendo]]></title>
    <link href="http://1up4dev.org/2013/04/o-que-eu-aprendi-escrevendo/"/>
    <updated>2013-04-11T07:30:47-03:00</updated>
    <id>http://1up4dev.org/2013/04/o-que-eu-aprendi-escrevendo</id>
    <content type="html"><![CDATA[<p>Apesar de ter <a href="http://www.casadocodigo.com.br/products/livro-javascript-jquery">um livro</a> e <a href="http://pro.imasters.com.br/online/cursos/ruby-on-rails-do-comeco-ao-fim">um curso</a> publicados, eu ainda estou longe de ser considerado um escritor. Honestamente, nem ao menos sei o que é necessário para que eu, ou outra pessoa, me considere como tal.</p>

<p>Pretendo escrever outro livro ainda esse ano, mas ainda não tenho nada definido. Escrever um curso ou um livro é algo cansativo, mas muito gratificante. Como não dei espaço entre um e outro, acho que seria bom eu tomar um ar antes de me lançar novamente nessa empreitada.</p>

<p>Seguindo os próprios passos que descrevo abaixo, resolvi separar alguns pontos que considero importantes.</p>

<h3>Escrever é um processo iterativo e incremental</h3>

<p>O texto não nasce pronto. As vezes uma coisa ou outra está pronta na sua cabeça, mas na hora de colocar no papel a coisa muda. Você esquece algumas partes, lembra de outras, muda a ordem.</p>

<p>O importante é que você coloque suas ideias no papel (ou no site), e depois releia com calma. Mostre para outras pessoas, peça opinião. Eu pensei em um texto por mais de dois anos e <a href="http://1up4dev.org/2013/02/programacao-funcional-com-javascript/">publiquei aqui</a> antes de adicionar no livro. O feedback dos leitores foi importantíssimo para que a versão final tivesse o mínimo de erros e o máximo de clareza possível.</p>

<h3>Defina bem o seu público</h3>

<p>Ao escrever sobre programação funcional em JavaScript, eu tinha bem claro quem é o leitor do 1up. Caso você não tenha definido quem será seu público e quais os requisitos necessários para que possam absorver seu conteúdo, você vai correr o risco de escrever um texto em aramaico para crianças de quarta série ou um texto de quarta série para doutores em línguas mortas.</p>

<p>Pior ainda é quando se tenta abraçar a todos. Seus braços são curtos para abraçar o mundo e, no final, alguma coisa vai acabar caindo no chão.</p>

<h3>Trace uma linha</h3>

<p>Como o Manifesto Ágil profere, <em>responder a mudanças é mais importante do que seguir um plano</em>, o que não quer dizer que você não precisa de um plano.</p>

<p>Eu costumo traçar um plano, seja como uma lista de tópicos, seja como um mindmap, e vou me guiando por ele até pegar o ritmo. Normalmente essa lista não permanece inalterada por mais de dois capítulos, mas ainda assim é importante você ter algo para te manter no caminho, por mais que esse caminho mude constantemente.</p>

<h3>Concentre-se</h3>

<p>Eu tenho problemas sérios de concentração, mas em algumas ocasiões consigo despejar quilos de texto ou código de uma única vez. Claro que uma revisão posterior é sempre bem vinda e necessária.</p>

<p>O problema são os culpados de sempre: família exigindo atenção (eles têm prioridade, não pense o contrário); Internet oferecendo todo o tipo de entretenimento; GTalk aberto e seus amigos ali, ao alcance dos dedos.</p>

<p>Escrever é um ato solitário. Lide com isso e concentre-se no que está fazendo.</p>

<h3>Arranje tempo</h3>

<p>&ldquo;Eu não tenho tempo&rdquo; é a desculpa preferida do procrastinador e do cara que quer que os outros acreditem que ele é muito ocupado.</p>

<p>Você tem tempo para conversar no GTalk, para acessar o 9gag, para ver os gols do Fantástico, mas nunca temos tempo para brincar com o filho, para conversar com a esposa (ou marido) ou para fazer aquela meia hora de esteira.</p>

<p>Um terço do meu livro foi escrito dentro de viagens em ônibus, táxis e aviões. Acho que produzi muito mais em uma hora de vôo até o Rio do que em uma tarde inteira jogada fora na frente do computador.</p>

<p>Quando você realmente quer fazer algo, o tempo aparece. Não ter tempo é uma outra forma de dizer &ldquo;isso não é importante o suficiente para mim&rdquo;.</p>

<h3>&lsquo;Pronto&rsquo; é melhor do que &lsquo;perfeito&rsquo;</h3>

<p>Depois do livro e do curso prontos e entregues, eu percebi coisas que poderia ter adicionado, frases que poderia ter mudado, assuntos que faltaram. Se existe a possibilidade de adicionar ou mudar, faça, mas não caia na armadilha de ficar polindo algo que já deveria estar em produção há tempos.</p>

<p>Pronto é melhor do que perfeito e, não importa o quanto você tente, seu trabalho nunca vai ficar perfeito.</p>

<h3>Divirta-se</h3>

<p>Principalmente, divirta-se.</p>

<p>Conheci muitas pessoas que sabem muito mais do assunto que estou escrevendo do que eu, pessoas que deram excelentes sugestões, ideias e me ensinaram a escrever melhor. E em tudo isso eu me diverti, aprendi, aproveitei o momento.</p>

<p>Não se leve tão a sério. É apenas um texto, um post, um curso, um livro. A vida é bem mais do que isso.</p>

<p>Abraço</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Monkey - lançado!]]></title>
    <link href="http://1up4dev.org/2013/01/http-monkey/"/>
    <updated>2013-01-23T13:29:16-02:00</updated>
    <id>http://1up4dev.org/2013/01/http-monkey</id>
    <content type="html"><![CDATA[<p>O <a href="https://github.com/rogerleite/http_monkey">HTTP Monkey</a> é um cliente http simples, com <strong>interface fluente</strong>, suporte a <strong>múltiplos <em>adapters</em></strong> (Net::HTTP, Curb, HTTPClient, EM-HTTP-Request) e <strong><em>middlewares </em></strong>no<em> estilo rack.</em></p>

<p>Pontos positivos:</p>

<ul>
<li><p><a href="http://rogerleite.github.com/http_monkey">Documentação</a>. Está um pouco desorganizado, mas tem. :D</p></li>
<li><p><a href="http://rogerleite.github.com/http_monkey/#light_and_powerful">Autenticações</a>. Suporta basic, digest e SSL.</p></li>
<li><p><a href="http://rogerleite.github.com/http_monkey/#more_power_to_the_people_for_god_sake">Middlewares</a> são simples classes Ruby. Por exemplo temos o <a href="https://github.com/rogerleite/http_monkey-cookie">middleware que dá suporte a cookies</a>.</p></li>
<li><p><a href="http://rogerleite.github.com/http_monkey/#flexibility">Callback</a> por Response code.</p></li>
<li><p>Helpers no headers response. Ex: resp.headers.content_type?; resp.headers.cache_control.max_age</p></li>
<li><p>Pouco código, fácil manutenção (mais fácil do povo contribuir também).</p></li>
</ul>


<p>Pontos negativos:</p>

<ul>
<li><p>Gem nova. Ainda não tem um case em produção.</p></li>
<li><p>Falta de middlewares para funcionalidades como Cache, OAuth … etc.</p></li>
<li><p>Não suporta adapter que permite requisições em paralelo.</p></li>
<li><p>Tem o <a href="https://github.com/lostisland/faraday">Faraday</a> como concorrente, que tem base em produção e bastantes <em>middlewares</em>.</p></li>
<li><p>A comunidade nacional e internacional ainda não conhece o Monkey (comecei agora a trabalhar nisso).</p></li>
</ul>


<p>Na página <a href="http://rogerleite.github.com/http_monkey/http_monkey_an_alternative_to_faraday.html">HTTP Monkey an alternative to Faraday</a>, comecei um trabalho de &ldquo;localizar&rdquo; o desenvolvedor que está acostumado com o Faraday em como trabalhar com o Monkey. Lembrando que a DSL do HTTP Monkey, foi feita pensando em substituir o uso do <a href="https://github.com/caelum/restfulie">Restfulie</a>, muita usada nos projetos da Abril Mídia.</p>

<p>Tem também <a href="http://www.slideshare.net/rogerleite14/http-monkey">uns slides</a> que apresentei na Abril em alguns tech talks.</p>

<p><strong> <a href="http://www.slideshare.net/rogerleite14/http-monkey">HTTP Monkey</a> </strong> from <strong><a href="http://www.slideshare.net/rogerleite14">Roger Leite</a></strong></p>

<p>Valeu e aceito numa boa sugestões e críticas referentes ao projeto, por favor comentem! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nos idos de 2012, UML, Design e Waterfall]]></title>
    <link href="http://1up4dev.org/2013/01/nos-idos-de-2012-uml-design-e-waterfall/"/>
    <updated>2013-01-04T13:51:14-02:00</updated>
    <id>http://1up4dev.org/2013/01/nos-idos-de-2012-uml-design-e-waterfall</id>
    <content type="html"><![CDATA[<p>Há alguns anos atrás não havia uma referencia forte e consistente sobre os processos de desenvolvimento de software que não fosse Waterfall. Embora movimentos ágeis, processos mais simples e eficazes venham sendo utilizados a muito mais tempo, eles não eram tão evidentes como agora.
Independente do processo ágil discutido <a href="http://scrum.org">Scrum</a>, <a href="http://www.lean.org">Lean</a>, <a href="http://xprogramming.com">XP</a> e etc, etc, etc&hellip; o movimento para remover as velhas e engessadas práticas de desenvolvimento de software cresce vertiginosamente e começa a movimentar grandes empresas, que ainda amarradas e processos internos pesadíssimos, entendem que algo precisa mudar para se conseguir maior flexibilidade e agilidade ao entregar novos serviços e funcionalidade a seus clientes, e obviamente, estar à frente da concorrência.</p>

<p>Em meio a corrida do novo ouro, me encontro em uma sala de treinamento, às vesperas de um novo ano, estudando, discutindo e demonstrando como analisar e modelar sistemas utilizando a mais famosa linguagem de modelagem: a <a href="http://pt.wikipedia.org/wiki/UML">UML</a>.
Nunca consegui traçar uma ligação saudável entre os modelos criados com UML e código funcionando em produção. A idéia principal da UML é a de comunicar aos envolvidos em um projeto o que se planeja implementar; quais os detalhes que norteiam o desenvolvimento de uma solução e que <a href="http://www.batebyte.pr.gov.br/modules/conteudo/conteudo.php?conteudo=1718">requisitos funcionais e não funcionais</a> devem ser implementados. O problema é que qualquer coisa diferente de código no desenvolvimento de sistemas, está fadada a diferentes interpretações, ao conhecimento e experiência de quem <a href="http://1up4dev.org/2008/11/arquiteto-cascateiro">produz</a> e consome tais artefatos.</p>

<p>A idéia de times multidisciplinares e autogerenciáveis trazida pelo movimento ágil distoa fortemente do <a href="http://en.wikipedia.org/wiki/Waterfall_model">modelo cascata</a>, que delinea claramente o papel do analista de negócios/requisitos, o arquiteto/designer da solução e os <del>pobres</del> desenvolvedores que terão de seguir à risca todas definições impostas pelos modelos produzidos. E se durante o ciclo ágil os problemas identificados são priorizados para serem endereçados no próximo ciclo, como o processo formal gerencia isso? Hum&hellip; daí vem minha maior crítica quanto ao uso de modelos no desenvolvimento de software. Já que se decidiu por engessar o processo, seguí-lo fielmente deveria ser o preço a ser pago para manter tanta parafernalha de artefatos sem valor. Identificado o problema, o fluxo deveria voltar lá no início e corrigir requisitos, modelos, código e testes; mas o mercado não permite tanta demora, as linhas de negócio precisam colocar seu produto na prateleira e o fluxo controladamente perfeito que outrora se desenhou, na vida real não funciona mais.</p>

<p>É inviável manter a &ldquo;documentação&rdquo; do sistema em face a uma concorrência e volatilidade de negócios tão vorazes, então eu me pergunto: O que aquelas pessoas estavam fazendo trancadas numa sala, consumindo o tempo a um alto <a href="http://www.stanford.edu/group/fms/fingate/staff/capitalequip/capital_software.html">custo</a> da sua empresa? Aprendendo a como não fazer? Pode ser. Constatando uma vez mais que embora no papel, no processo, tudo aquilo que a teoria diz é muito bonito e controlado mas não funciona no mundo real? Sim, pode ser também, mas o pior é que passados anos de experiências ruins, projetos fracassados e montanhas de dinheiro jogados no ralo, ainda terão coragem de propor um processo baseado em requisitos → modelagem → desenvolvimento → testes, faseados e interdependentes, ignorando o histórico de dores e prejuízos experimentado.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant, virtualizando o ambiente de trabalho]]></title>
    <link href="http://1up4dev.org/2012/06/vagrant-virtualizando-o-ambiente-de-trabalho/"/>
    <updated>2012-06-01T10:14:30-03:00</updated>
    <id>http://1up4dev.org/2012/06/vagrant-virtualizando-o-ambiente-de-trabalho</id>
    <content type="html"><![CDATA[<p><a href="http://vagrantup.com/">Vagrant</a>, se você não conhece ou não deu atenção para ele nestes últimos tempos, este post é pra ti mesmo. Trata-se de uma ferramenta que facilita (e muito!) a criação de Máquinas Virtuais usando o Virtual Box por baixo dos panos. E não é só isso! Com o Vagrant fazer <em>port forward</em>, compartilhar pastas é só questão de alterar um arquivo de configuração. Continue lendo que eu detalho melhor tudo isto.</p>

<h2>Prós e Contra<del>s</del></h2>

<p>Vários pontos se destacam no uso do Vagrant:</p>

<ul>
<li><p>Centraliza as <em>dependências de ambiente</em> do projeto. Sabe aquele projeto legado que só roda com rubygems 1.4.2 e mongo 1.1, com o Sol alinhado aos anéis de Saturno, então, você pode deixar tudo isso num <em>box</em> do Vagrant.</p></li>
<li><p>Documenta as <em>dependências de ambiente</em>, caso use algum <em>Provisioner</em>.</p></li>
<li><p>Facilita a integração de novos desenvolvedores na equipe, independente do SO que utiliza.</p></li>
<li><p>Mantém a sua máquina local &ldquo;limpa&rdquo;. Você não precisa instalar o Mysql, Postgree, Redis, Memcache etc. para cada projeto que roda.</p></li>
</ul>


<p>Agora vem o contra.</p>

<ul>
<li>Se você trabalha com projetos simples ou até mesmo com poucos projetos, você pode sentir que está usando um canhão para matar mosca.</li>
</ul>


<h2>Instalação</h2>

<p>Você precisa do <a href="https://www.virtualbox.org/">VirtualBox</a> (versões 4.0.x ou 4.1.x). Já o Vagrant, o jeito mais fácil é instalar via rubygems, ou seja, um &ldquo;gem install vagrant&rdquo; e pronto! Caso ache melhor instalar via .dmg, .deb etc., você pode baixar em <a href="http://downloads.vagrantup.com">http://downloads.vagrantup.com</a>.</p>

<h2>Exemplo de Uso</h2>

<p>O <a href="http://vagrantup.com/v1/docs/getting-started/index.html">Getting Started</a> do Vagrant é bem completo e tem também o <a href="http://railscasts.com/episodes/292-virtual-machines-with-vagrant">Rails Cast</a>, mas segue um resumão.</p>

<p>Supondo que o vagrant está instalado. Vamos adicionar uma máquina:</p>

<pre><code>$ vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
</code></pre>

<p>Dentro da pasta do projeto, você tem criar o Vagrantfile e para isso execute:</p>

<pre><code>$ vagrant init lucid32  #ja especificando o box lucid32 baixado
</code></pre>

<p>Vamos subir a VM:</p>

<pre><code>$ vagrant up
</code></pre>

<p>Para acessar a VM:</p>

<pre><code>$ vagrant ssh
</code></pre>

<p>Repare que dentro da VM, na pasta &ldquo;/vagrant&rdquo; estará montado o diretório do seu projeto, onde está o Vagrantfile. Supondo que seja um projeto Rails, daí em diante você segue todo o fluxo <em>default</em>, instalando o <em>bundler</em>, dando um <em>bundle install</em> e etc.</p>

<p>Vamos supor que você executou um &ldquo;rails s&rdquo; na VM e o projeto subiu na porta 3000. Para acessá-lo, você tem que configurar o forward_port no VagrantFile:</p>

<pre><code>&lt;code&gt;config.vm.forward_port 3000, 4000  # 3000 from VM, available at 4000&lt;/code&gt;
</code></pre>

<p>Dá um restart na VM:</p>

<pre><code>$ vagrant halt &amp;&amp; vagrant up
</code></pre>

<p>Subir o projeto novamente. (vagrant ssh e o &ldquo;rails s&rdquo; dentro do /vagrant)</p>

<p>Acesse <a href="http://localhost:4000.">http://localhost:4000.</a></p>

<h2>Extras e Conclusão</h2>

<p>A idéia deste post é explicar rapidamente o que é e como usar o Vagrant, mas com certeza o Vagrant tem muito mais a oferecer. Segue alguns tópicos, que valem posts:</p>

<p><a href="http://vagrantup.com/v1/docs/provisioners.html">Provisioning</a> &ndash; Existem várias ferramentas que podem te ajudar no <em>setup</em> da sua VM. O Vagrant tem suport a Chef, Puppet e até mesmo Shell script.</p>

<p><a href="http://vagrantup.com/v1/docs/plugins.html">Plugins</a> &ndash; Você pode mudar ou adicionar funcionalidades ao Vagrant, criando plugins. É claro que sempre vale a pena googlar antes. Por exemplo o <a href="https://github.com/t9md/vagrant-snap">vagrant-snap</a>, que ajuda a tirar e gerenciar snapshots da VM.</p>

<p><a href="http://vagrantup.com/v1/docs/boxes.html">Boxes</a> &ndash; No exemplo acima, usamos um box de Ubuntu, mas nada impede de você criar ou utilizar outros boxes. Existe o <a href="http://vagrantbox.es/">vagrantbox.es</a> que pode te ajudar a baixar uma existente, ou você vai ter que se aventurar pelos docs para criar uma zerada.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teste sua aplicação de Linha de Comando com Cucumber!]]></title>
    <link href="http://1up4dev.org/2010/05/teste-sua-aplicacao-de-linha-de-comando-com-cucumber/"/>
    <updated>2010-05-14T07:00:21-03:00</updated>
    <id>http://1up4dev.org/2010/05/teste-sua-aplicacao-de-linha-de-comando-com-cucumber</id>
    <content type="html"><![CDATA[<p>É engraçado como tudo é questão de treino e disciplina. Levei um tempo para me acostumar com <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>, <a href="http://www.vim.org/">Vim</a> e não poderia ser diferente com testes funcionais, sendo mais especifico, <a href="http://cukes.info/">Cucumber</a>.</p>

<p>Até o momento, só tinha usado cucumber em projetos web. E quando voltei a desenvolver o <a href="http://github.com/rogerleite/rubygems_snapshot">rubygems_snapshot</a>, senti falta de algo para testar funcionalmente. Baseado no <a href="http://github.com/vertiginous/pik">pik</a>, montei um esquema simples para validar qualquer aplicação de linha de comando.</p>

<h2>Como instalar</h2>

<p>Basicamente, será necessário (fontes via gist):</p>

<ul>
<li><p>rake para executar o cucumber</p></li>
<li><p>env_terminal.rb</p></li>
<li><p>terminal_steps.rb</p></li>
</ul>


<p>Dado que você tem cucumber instalado, com o esquema da pasta &ldquo;features&rdquo;.</p>

<ul>
<li><p>Copie o cucumber.rake para a raiz.</p></li>
<li><p>Copie o env_terminal.rb para a pasta features.</p></li>
<li><p>Copie o terminal_steps.rb para a pasta features/step_definitions/terminal_steps.rb.</p></li>
<li><p>Edite o  env.rb incluindo (pode ser no começo):</p>

<p>require &ldquo;env_terminal&rdquo;</p></li>
<li><p>Dentro do Rakefile, pode ser no final mesmo, adicione:</p>

<p>load &ldquo;cucumber.rake&rdquo;</p></li>
</ul>


<h2>Como usar</h2>

<p>Todas features:</p>

<pre><code>rake cucumber
</code></pre>

<p>Features com a tag @wip, também conhecida como Work in Progress.</p>

<pre><code>rake cucumber:wip
</code></pre>

<h2>Informações Extras</h2>

<p>Caso precise de mais informações, você tem a opção de ver a saída dos comandos, executando a rake assim:</p>

<pre><code>rake cucumber show_output=true
</code></pre>

<p>ou</p>

<pre><code>rake cucumber:wip show_output=true
</code></pre>

<p>No caso do snapshot, tive a necessidade de &ldquo;modificar&rdquo; o comando gem toda vez que era executado, ou melhor, passar um parâmetro para controlar o ambiente. Dentro do env_terminal.rb, existe o método <strong>gsub_command</strong>, nele você pode &ldquo;redefinir&rdquo; comandos, caso necessite.</p>

<h2><strong>Gostei, quero mais!</strong></h2>

<p>A solução acima, é bem &ldquo;caseira&rdquo;. Para projetos simples com funcionalidades simples, funciona bem.</p>

<p>Caso queira algo mais robusto, você tem a opção da <a href="http://github.com/aslakhellesoy/aruba">gem Aruba</a>.</p>

<p>Tem este post como introdução:</p>

<p><a href="http://www.themodestrubyist.com/2010/04/22/aruba---cucumber-goodness-for-the-command-line/">Aruba &ndash; Cucumber Goodness for the Command-Line</a></p>
]]></content>
  </entry>
  
</feed>
