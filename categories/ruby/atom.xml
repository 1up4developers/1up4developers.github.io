<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 1up4developers]]></title>
  <link href="http://1up4dev.org/categories/ruby/atom.xml" rel="self"/>
  <link href="http://1up4dev.org/"/>
  <updated>2014-11-17T09:49:34-02:00</updated>
  <id>http://1up4dev.org/</id>
  <author>
    <name><![CDATA[1up4developers]]></name>
    <email><![CDATA[1up4dev@googlegroups.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lendo arquivo CSV com parcimônia no Ruby]]></title>
    <link href="http://1up4dev.org/2014/11/lendo-arquivo-csv-com-parcimonia-no-ruby/"/>
    <updated>2014-11-17T09:34:00-02:00</updated>
    <id>http://1up4dev.org/2014/11/lendo-arquivo-csv-com-parcimonia-no-ruby</id>
    <content type="html"><![CDATA[<p>Ler e escrever <a href="http://en.wikipedia.org/wiki/Comma-separated_values">arquivo csv</a> é um mal necessário de muitos sistemas, ainda mais levando em conta que esta integração será feita via Excel, em algum Windows, com quilos de texto com acentos e dados a formatar. Dado este cenário, e que ele provavelmente se repetirá no futuro, deixo aqui um post auto-ajuda para mim mesmo e provavelmente para você que está lendo. :D</p>

<p>Na versão 1.9.3 e superior, o Ruby incluiu a classe <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/csv/rdoc/CSV.html">CSV</a> na sua <em>standard lib</em>, que facilita o trabalho de ler e/ou escrever arquivos csv. Exemplos em código abaixo.</p>

<h2>Conhecendo o CSV</h2>

<p>O modo mais simples e direto para ler um arquivo csv, é usar o <code>CSV.read</code> que retorna um Array de Arrays:</p>

<p>```
require &lsquo;csv&rsquo;
array_students = CSV.read(&lsquo;/tmp/mock_data.csv&rsquo;) # return an Array of Arrays
array_students.each { |row| puts row.inspect }  # => output:</p>

<h1>&ldquo;[\"id\&rdquo;, \&ldquo;name\&rdquo;, \&ldquo;country\&rdquo;, \&ldquo;birthday\&rdquo;]"</h1>

<h1>&ldquo;[\"1\&rdquo;, \&ldquo;Virginia Harvey\&rdquo;, \&ldquo;GB\&rdquo;, \&ldquo;01/06/1993\&rdquo;]"</h1>

<p>```</p>

<p>Dentro da classe CSV, existem mais duas classes que facilitam ainda mais o manuseio dos dados.</p>

<p>Caso necessite de mais requinte e sofisticação, o método <code>CSV.table</code> retorna uma instância de <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/csv/rdoc/CSV/Table.html">CSV::Table</a>. Com o table, você tem acesso ao cabeçalho através do <code>headers</code> e acesso a cada linha do arquivo com o <code>each</code>, que retorna uma instância de <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/csv/rdoc/CSV/Row.html">CSV::Row</a>.</p>

<p>```
require &lsquo;csv&rsquo;
table_students = CSV.table(&lsquo;/tmp/mock_data.csv&rsquo;) # => instance of CSV::Table
puts table_students.headers.inspect # => [:id, :name, :country, :birthday]
table_students.each { |row| puts row.inspect } # => output:</p>

<h1>&lt;CSV::Row id:1 name:&ldquo;Virginia Harvey&rdquo; country:&ldquo;GB&rdquo; birthday:&ldquo;01/06/1993&rdquo;></h1>

<p>table_students.each { |row| puts row.fetch(:name) } # => output:</p>

<h1>Virginia Harvey</h1>

<p>```</p>

<p>Tanto o <code>read</code> quanto o <code>table</code>, aceitam um hash de options como segundo argumento. Tem uma descrição detalhada na documentação do <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/csv/rdoc/CSV.html#method-c-new">método new</a>. Exemplo usando options:</p>

<p><code>
require 'csv'
table_students = CSV.table('/tmp/mock_data2.csv', col_sep: ";", skip_blanks: true, converters: [])
table_students.each { |row| puts row.inspect }
</code></p>

<h2>CSV converters</h2>

<p><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/csv/rdoc/CSV.html#HeaderConverters">CSV::HeaderConverters</a> contém um hash de symbol e block que são usados para converter os valores do cabeçalho. Para usá-los, você deve informar qual <em>converter</em> deseja aplicar na opção <code>header_converters</code>. Acredito que o código abaixo explica melhor.</p>

<p>```
require &lsquo;csv&rsquo;
puts CSV::HeaderConverters.keys.inspect # => [:downcase, :symbol]</p>

<h1>Add new header converter</h1>

<p>CSV::HeaderConverters[:remap] = lambda do |raw_value|
  raw_value = raw_value.to_sym
  case raw_value
  when :country</p>

<pre><code>:pais
</code></pre>

<p>  when :birthday</p>

<pre><code>:dt_nascimento
</code></pre>

<p>  else</p>

<pre><code>raw_value
</code></pre>

<p>  end
end</p>

<p>table_students = CSV.table(&lsquo;mock_data.csv&rsquo;, col_sep: &ldquo;,&rdquo;, header_converters: :remap)
table_students.each do |row|
  puts [row.fetch(:pais), row.fetch(:dt_nascimento)].inspect # => [&ldquo;GB&rdquo;, &ldquo;01/06/1993&rdquo;]
end
```</p>

<p>No exemplo acima, criei o HeaderConverter &ldquo;remap&rdquo; que traduz o cabeçalho country para pais e birthday para dt_nascimento. Por padrão, o <code>CSV</code> disponibiliza os converters downcase e symbol, que por sinal são usados quando usamos o método <code>table</code> para ler csv.</p>

<p><a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/csv/rdoc/CSV.html#Converters">CSV::Converters</a> segue o mesmo padrão de symbol e block, a única diferença que este é usado para converter os valores da linha. Vamos ao código.</p>

<p>```
require &lsquo;csv&rsquo;
require &lsquo;date&rsquo;</p>

<p>puts CSV::Converters.keys.inspect       # => [:integer, :float, :numeric, :date, :date_time, :all]</p>

<h1>Add new converter</h1>

<p>CSV::Converters[:nil_to_empty] = lambda do |raw_value|
  raw_value.nil? ? &ldquo;&rdquo; : raw_value
end</p>

<h1>Add new converter</h1>

<p>CSV::Converters[:brazilian_date] = lambda do |raw_value|
  if raw_value =~ /\d{2}\/\d{2}\/\d{4}/</p>

<pre><code>Date.strptime(raw_value, "%d/%m/%Y")
</code></pre>

<p>  else</p>

<pre><code>raw_value
</code></pre>

<p>  end
end</p>

<h1>Group converters</h1>

<p>CSV::Converters[:my_custom_converters] = [:nil_to_empty, :brazilian_date]</p>

<p>table_students = CSV.table(&lsquo;mock_data.csv&rsquo;, col_sep: &ldquo;,&rdquo;, converters: :my_custom_converters)
table_students.each do |row|
  puts [row.fetch(:country), row.fetch(:birthday)].inspect # => [&ldquo;GB&rdquo;, #&lt;Date: 1993-06-01 ((2449140j,0s,0n),+0s,2299161j)>]
end
```</p>

<p>No exemplo acima criei dois converters. Um para trocar nil por &ldquo;&rdquo; e o outro que converte para Date caso o valor esteja no formato 99/99/9999.</p>

<h2>Encoding hell com Excel</h2>

<p>Normalmente o csv é usado como meio de integração Excel &lt;=> Sistema. Acontece que o Excel não se dá muito bem com acentos especiais como ãõáé etc. Isto porque estamos em 2014. Acontece que quando há caracteres especiais, a única abordagem que funcionou foi exportar para Unicode text. Neste formato, o encoding do arquivo é UTF-16LE e separado por tab (\t). Este <a href="http://blog.plataformatec.com.br/2009/09/exportando-dados-para-excel-usando-csv-em-um-aplicativo-rails/">post de 2009 da Plataformatec</a> explica com mais detalhes este jeitinho do Excel de ser com os dados. A única diferença de 2009 pra hoje, é que podemos passar o encoding como parâmetro ao ler o arquivo, e por sorte evitar o uso do iconv. Vamos ao código:</p>

<p>```
require &lsquo;csv&rsquo;</p>

<p>table = CSV.table(&lsquo;mock_unicode.txt&rsquo;,</p>

<pre><code>              col_sep: "\t", # tab as delimiter
              encoding: "UTF-16LE:UTF-8") # read UTF-16LE and convert to UTF-8
</code></pre>

<p>table.each do |row|
  puts row.inspect
end
```</p>

<h2>Evitando o abuso de memória</h2>

<p>Ao ler arquivos com <code>read</code> ou <code>table</code>, o arquivo é colocado em memória, ou seja, ao processar uma planilha de 100mb, o seu processo ruby vai pra um 100mb e pouco. Agora imagina 20 workers e cada um processando uma planilha de 100mb ou mais, facilmente o seu servidor terá um pico de consumo de memória, o no pior cenário vai dar crash no processo. Para evitar este consumo devemos usar o <code>foreach</code> do <code>CSV</code>.</p>

<p>```
require &lsquo;csv&rsquo;</p>

<p>CSV.foreach(&ldquo;mock_data.csv&rdquo;, col_sep: &ldquo;,&rdquo;) do |row|
  puts row.inspect
end</p>

<h1>=></h1>

<h1>[&ldquo;id&rdquo;, &ldquo;name&rdquo;, &ldquo;country&rdquo;, &ldquo;birthday&rdquo;]</h1>

<h1>[&ldquo;1&rdquo;, &ldquo;Virginia Harvey&rdquo;, &ldquo;GB&rdquo;, &ldquo;01/06/1993&rdquo;]</h1>

<p>```</p>

<p>Desta maneira a leitura é mais otimizada, pois apenas uma linha por vez é lida. O único problema é que perdemos algumas facilidades do <code>table</code>, como os <code>headers</code> e a instância do <code>CSV::Row</code> por linha. Tentando chegar no modelo ideal, montei uma classe que usa o foreach e mesmo assim tem os <code>headers</code> e os <code>rows</code>.</p>

<p>```
require &lsquo;csv&rsquo;</p>

<p>class SheetReader</p>

<p>  attr_reader :headers</p>

<p>  def initialize(filepath)</p>

<pre><code># options to read unicode text file
# options = {
#   col_sep: "\t",
#   skip_blanks: true,
#   encoding: "UTF-16LE:UTF-8",
#   converters: []
# }
options = {col_sep: ",", converters: []}
@csv_reader = CSV.foreach(filepath, options) # gets a iterator
@headers    = convert_headers(@csv_reader.next) # read first line
</code></pre>

<p>  end</p>

<p>  # yield an instance of <a href="http://ruby-doc.org/stdlib-2.1.0/libdoc/csv/rdoc/CSV/Row.html">http://ruby-doc.org/stdlib-2.1.0/libdoc/csv/rdoc/CSV/Row.html</a>
  def each_row(&amp;block)</p>

<pre><code>begin
  while true
    raw_row = @csv_reader.next  # raise StopIteration in EOF
    yield CSV::Row.new(headers, raw_row)
  end
rescue StopIteration
end
</code></pre>

<p>  end</p>

<p>  protected</p>

<p>  # Internal: Convert headers to Array of symbols.
  #
  # raw_headers &ndash; Array of Strings.
  #
  # Examples
  #
  #   convert_headers([&ldquo;ATIVO&rdquo;, &ldquo;NOME COMERCIAL&rdquo;])
  #   # => [:ativo, :nome_comercial]
  #
  # Returns Array of symbols.
  def convert_headers(raw_headers)</p>

<pre><code>raw_headers.compact! # removes nil values
converter = lambda do |header|
  header_converters = CSV::HeaderConverters.values
  header_converters.inject(header) do |header, converter_proc|
    converter_proc.call(header)
  end
end

raw_headers.map { |header| converter.call(header) }
</code></pre>

<p>  end</p>

<p>end</p>

<p>reader = SheetReader.new(&lsquo;mock_data.csv&rsquo;)
reader.headers # => [:id, :name, :country, :birthday]
reader.each_row do |row|
  puts row.inspect # => #&lt;CSV::Row id:&ldquo;1&rdquo; name:&ldquo;Virginia Harvey&rdquo; country:&ldquo;GB&rdquo; birthday:&ldquo;01/06/1993&rdquo;>
end
```</p>

<p>Por último, uma observação importante: todo este código acima foi rodado no ruby 2.1.0. Espero que este mini guia de como ler arquivo csv com Ruby te ajude.
Segue alguns links com mais informações:</p>

<ul>
<li><a href="http://www.sitepoint.com/guide-ruby-csv-library-part/">http://www.sitepoint.com/guide-ruby-csv-library-part/</a></li>
<li><a href="http://www.sitepoint.com/guide-ruby-csv-library-part-2/">http://www.sitepoint.com/guide-ruby-csv-library-part-2/</a></li>
<li><a href="http://technicalpickles.com/posts/parsing-csv-with-ruby/">http://technicalpickles.com/posts/parsing-csv-with-ruby/</a></li>
<li><a href="http://blog.plataformatec.com.br/2009/09/exportando-dados-para-excel-usando-csv-em-um-aplicativo-rails/">http://blog.plataformatec.com.br/2009/09/exportando-dados-para-excel-usando-csv-em-um-aplicativo-rails/</a></li>
</ul>


<p>Dúvidas, sugestões ou qualquer outra coisa. Deixe um comentário ou se preferir, mande um <a href="https://twitter.com/rogerleite">tweety!</a> :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Monkey - lançado!]]></title>
    <link href="http://1up4dev.org/2013/01/http-monkey/"/>
    <updated>2013-01-23T13:29:16-02:00</updated>
    <id>http://1up4dev.org/2013/01/http-monkey</id>
    <content type="html"><![CDATA[<p>O <a href="https://github.com/rogerleite/http_monkey">HTTP Monkey</a> é um cliente http simples, com <strong>interface fluente</strong>, suporte a <strong>múltiplos <em>adapters</em></strong> (Net::HTTP, Curb, HTTPClient, EM-HTTP-Request) e <strong><em>middlewares </em></strong>no<em> estilo rack.</em></p>

<p>Pontos positivos:</p>

<ul>
<li><p><a href="http://rogerleite.github.com/http_monkey">Documentação</a>. Está um pouco desorganizado, mas tem. :D</p></li>
<li><p><a href="http://rogerleite.github.com/http_monkey/#light_and_powerful">Autenticações</a>. Suporta basic, digest e SSL.</p></li>
<li><p><a href="http://rogerleite.github.com/http_monkey/#more_power_to_the_people_for_god_sake">Middlewares</a> são simples classes Ruby. Por exemplo temos o <a href="https://github.com/rogerleite/http_monkey-cookie">middleware que dá suporte a cookies</a>.</p></li>
<li><p><a href="http://rogerleite.github.com/http_monkey/#flexibility">Callback</a> por Response code.</p></li>
<li><p>Helpers no headers response. Ex: resp.headers.content_type?; resp.headers.cache_control.max_age</p></li>
<li><p>Pouco código, fácil manutenção (mais fácil do povo contribuir também).</p></li>
</ul>


<p>Pontos negativos:</p>

<ul>
<li><p>Gem nova. Ainda não tem um case em produção.</p></li>
<li><p>Falta de middlewares para funcionalidades como Cache, OAuth … etc.</p></li>
<li><p>Não suporta adapter que permite requisições em paralelo.</p></li>
<li><p>Tem o <a href="https://github.com/lostisland/faraday">Faraday</a> como concorrente, que tem base em produção e bastantes <em>middlewares</em>.</p></li>
<li><p>A comunidade nacional e internacional ainda não conhece o Monkey (comecei agora a trabalhar nisso).</p></li>
</ul>


<p>Na página <a href="http://rogerleite.github.com/http_monkey/http_monkey_an_alternative_to_faraday.html">HTTP Monkey an alternative to Faraday</a>, comecei um trabalho de &ldquo;localizar&rdquo; o desenvolvedor que está acostumado com o Faraday em como trabalhar com o Monkey. Lembrando que a DSL do HTTP Monkey, foi feita pensando em substituir o uso do <a href="https://github.com/caelum/restfulie">Restfulie</a>, muita usada nos projetos da Abril Mídia.</p>

<p>Tem também <a href="http://www.slideshare.net/rogerleite14/http-monkey">uns slides</a> que apresentei na Abril em alguns tech talks.</p>

<p><strong> <a href="http://www.slideshare.net/rogerleite14/http-monkey">HTTP Monkey</a> </strong> from <strong><a href="http://www.slideshare.net/rogerleite14">Roger Leite</a></strong></p>

<p>Valeu e aceito numa boa sugestões e críticas referentes ao projeto, por favor comentem! :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 - Novidades]]></title>
    <link href="http://1up4dev.org/2012/11/rails-4-novidades/"/>
    <updated>2012-11-29T11:38:49-02:00</updated>
    <id>http://1up4dev.org/2012/11/rails-4-novidades</id>
    <content type="html"><![CDATA[<p>O Rails 4 já está em desenvolvimento <del>faz um tempo</del>, na verdade um bom tempo, desde 20/Dez/2011, olha <a href="https://github.com/rails/rails/commit/632fa15">o commit do DHH aqui</a>. No <a href="http://edgeguides.rubyonrails.org/4_0_release_notes.html">Ruby on Rails guides do <em>edge</em></a>, já tem muita coisa documentada do que vem por aí.</p>

<p>Segue um resumão:</p>

<ul>
<li><p>Suporte somente a ruby 1.9.3 ou superior</p></li>
<li><p>Vendor/Plugins já era</p></li>
<li><p>Muita &ldquo;magia&rdquo; movida pra gems \o/ (Dynamic finders, Mass assignments, AR Session Store, ActiveResource … e muito mais)</p></li>
<li><p>Interface de Queue</p></li>
<li><p>Asynchronous Mailer</p></li>
<li><p>ActionController::Live</p></li>
<li><p>HTML5 tag helpers</p></li>
<li><p>Threadsafe on by default</p></li>
</ul>


<p>O <a href="https://twitter.com/spastorino">Santiago Pastorino</a>, um dos commiters do Rails está mantendo um <a href="http://blog.wyeworks.com/2012/11/13/rails-4-compilation-links/">ótimo post</a> sobre o desenvolvimento do Rails 4, que vale a pena acompanhar.</p>

<p>Sucesso!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MinionServer - a real server to mock servers!]]></title>
    <link href="http://1up4dev.org/2012/11/minionserver-a-real-server-to-mock-servers/"/>
    <updated>2012-11-28T13:49:06-02:00</updated>
    <id>http://1up4dev.org/2012/11/minionserver-a-real-server-to-mock-servers</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/rogerleite/minion_server">MinionServer</a> is a ruby gem to help you with integration tests. You can create an app using Rack Builder and start a tiny server very easy. Let me show you some code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">minion_server</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;build your integration app&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">IntegrationApp</span> <span class="o">=</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Builder</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">map</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;run lambda { |env|</span>
</span><span class='line'><span class="sr">  [200, {&quot;Content-Type&quot; =&amp;gt; &quot;text/</span><span class="n">plain</span><span class="s2">&quot;}, [&quot;</span><span class="no">Be</span> <span class="n">happy!</span><span class="s2">&quot;]]</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end</span>
</span><span class='line'><span class="s2">end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;server = MinionServer.new(IntegrationApp)</span>
</span><span class='line'><span class="s2">server.start(&amp;ldquo;localhost&amp;rdquo;, 1620)  # default: localhost, 4000&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;do your calls&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;system &amp;ldquo;curl &lt;a href=&quot;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">1620</span><span class="s2">&quot;&gt;http://localhost:1620&lt;/a&gt;&amp;rdquo; # =&gt; &amp;ldquo;Be happy!&amp;rdquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;server.shutdown</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can see more examples at <a href="https://github.com/rogerleite/http_monkey">http_monkey</a>&rsquo;s integration tests.
Hope that helps!</p>

<p><strong>pt-br moment</strong>: Está em inglês porque eu publiquei no <a href="https://coderwall.com/p/ibr4ig">coderwall</a> e depois tive a idéia brilhante de postar aqui, com a preguiça mais brilhante ainda de traduzir em pt-br.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concepção do RoloGames]]></title>
    <link href="http://1up4dev.org/2012/06/concepcao-do-rologames/"/>
    <updated>2012-06-25T07:05:09-03:00</updated>
    <id>http://1up4dev.org/2012/06/concepcao-do-rologames</id>
    <content type="html"><![CDATA[<p>Este post é um tópico da <a href="http://1up4dev.org/2012/06/a-experiencia-de-lancar-o-rologames/">Experiência de lançar o RoloGames</a>.</p>

<h2>Quando surgiu a idéia</h2>

<p>Como jogador, nunca achei um serviço legal pra trocar jogos usados. Haviam poucas opções e normalmente as trocas eram feitas via fórum (UOL Jogos, por exemplo). Na época minha filha tinha acabado de nascer, eu estava num emprego novo e acabei congelando a idéia. Recentemente surgiram alguns sites de trocas, tentei usar mas não gostei, pois eram muito &ldquo;abertos&rdquo; e mais aborrecia do que gerava oportunidade real. Sofrendo com isso que o Panachi e eu bolamos o <a href="http://rologames.com.br">RoloGames</a>, onde a troca deve ser sempre 1 por 1 e o site só te avisa se o <em>match </em>for exato.</p>

<h2>Definindo um mantra</h2>

<p><a href="http://www.youtube.com/watch?v=VKhEg79xLio"><img src="/images/uploads/2012/06/kawasaki-sm.jpg" alt="A Arte do Começo - The Art of Start" /></a></p>

<p>Totalmente baseado nas dicas do Sr. Kawasaki em <a href="http://www.youtube.com/watch?v=VKhEg79xLio">A Arte do Começo</a>, definimos uma filosofia para o site. Lembrando que se mantivermos esta filosofia sempre em mente, o site não perderá seu foco:</p>

<ul>
<li><p><strong>Oportunidades confiáveis</strong>. Queremos que o usuário encontre somente as oportunidades de troca que <strong>façam sentido</strong> a ele, e não receba spams que infortunam a vida ou propostas <em>sem noção</em> (por exemplo, oferecerem um jogo antigo em troca de um lançamento).</p></li>
<li><p><strong>Toda troca deve ser justa</strong>. Infelizmente, é uma prática considerada normal a troca de 3 jogos por 1, onde pessoas ganham dinheiro em cima de jogadores. As propostas e trocas são sempre de um jogo por outro, de acordo com os desejos e ofertas dos usuários.</p></li>
<li><p><strong>Fácil de usar</strong>. O site não deve atrapalhar a vida do usuário com mensagens que ele não queira receber ou oportunidades que não façam sentido. É claro que a velocidade de navegação do site conta neste quesito.</p></li>
<li><p><strong>Social</strong>. Os usuários podem acompanhar a atividade de seus amigos, enviar mensagens diretas e ter a escolha de trocar os jogos somente com quem quiser.</p></li>
</ul>


<h2>Provas de Conceitos</h2>

<p>Antes de encostar no código, o Panachi e eu definimos o objetivo do site e algumas premissas para começar o projeto, e a mais importante era: ter um banco de dados de jogos. Definimos somente as informações necessárias de um jogo, e partimos para uma prova de conceito. Em dois dias conseguimos montar um banco de dados bem completo, e a nossa solução foi simplesmente um <a href="http://1up4dev.org/2011/01/criando-um-webcrawler-de-modo-facil-e-rapido-com-ruby-e-nokogiri/">crawler</a> de jogos! Por sinal, foi tão produtivo que nossa outra prova de conceito originou o <a href="https://github.com/rogerleite/psn_trophies">psn_trophies</a>.</p>

<h2>Interface no papel</h2>

<p>Em paralelo às provas de conceito, começamos a rascunhar as telas do site. O processo foi bem simples, uma pilha de sulfite e lápis (na falta de uma caneta <a href="http://37signals.com/svn/posts/466-sketching-with-a-sharpie">Sharpie</a>). A partir dos esboços, começamos a definir quais funcionalidades o site teria. Em seguidas priorizamos as mais importantes e fechamos o escopo da primeira versão. Durante o desenvolvimento, muita coisa mudou no layout, mas os &ldquo;rabiscos&rdquo; da concepção foram a essência de tudo.</p>

<h2>Início do desenvolvimento</h2>

<p>Já tinhamos uma prova de conceito, uns rascunhos das páginas e uma lista de funcionalidades. E todo processo levou cerca de uma semana.</p>

<p>Sem perder mais tempo, partimos para o código! E foi então que começamos a tropeçar nos detalhes&hellip; mas este será um assunto para o próximo post. Até lá!</p>
]]></content>
  </entry>
  
</feed>
