<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | My Octopress Blog]]></title>
  <link href="http://1up4developers.github.io/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://1up4developers.github.io/"/>
  <updated>2013-09-15T18:08:39-03:00</updated>
  <id>http://1up4developers.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pair Programming remoto com Screen e Vim]]></title>
    <link href="http://1up4developers.github.io/blog/2013/03/20/pair-programming-remoto-com-screen-e-vim/"/>
    <updated>2013-03-20T00:00:00-03:00</updated>
    <id>http://1up4developers.github.io/blog/2013/03/20/pair-programming-remoto-com-screen-e-vim</id>
    <content type="html"><![CDATA[<p>Limitar a produtividade e colaboração interpessoal ao espaço físico de um escritório parece uma idéia cada vez menos viável no ramo de desenvolvimento de software.</p>

<p>Empresas de TI bem sucedidas como <a title="37signals" href="http://37signals.com/" target="_blank">37signals</a> e <a title="Github" href="https://github.com/" target="_blank">Github</a> apostam em times e colaboradores distribuídos pelo mundo trabalhando remotamente em seus projetos.</p>

<p>Usando as ferramentas e práticas certas é possível <a title="REMOTE" href="http://37signals.com/svn/posts/3435-remote-office-not-required-the-new-book-by-37signals-coming-fall-2013" target="_blank">trabalhar remotamente</a> e até mesmo <a title="Pair programming" href="http://en.wikipedia.org/wiki/Pair_programming" target="_blank">parear com outro desenvolvedor</a> à distância.</p>

<h2>Requisitos</h2>


<ul>
    <li>ssh</li>
    <li>screen</li>
    <li>vim</li>
    <li>skype</li>
</ul>


<p>Para compartilhar o mesmo &ldquo;contexto&rdquo; remotamente, ambos desenvolvedores deverão ter acesso ao mesmo ambiente de desenvolvimento, via <strong>ssh</strong>. Estando em modo texto, será necessário utilizar um editor compatível, neste caso o <strong><a title="O melhor editor" href="http://www.vim.org/" target="_blank">VIM</a></strong>.  E para compartilhar o terminal em tempo real, utilizaremos o Screen. Para comunicação, basta utilizar o Skype. Simples não!?</p>

<h2>Instalação</h2>


<p>Uma vez escolhido o ambiente de desenvolvimento comum (um servidor de homologação, por exemplo), instale o Screen:</p>

<pre>$ sudo apt-get install screen</pre>


<p>Em seguida, configure as permissões de execução:</p>

<pre>$ chmod u+s /usr/bin/screen
$ chmod 755 /var/run/screen</pre>


<p>O Screen roda como um <em>daemon</em>, mantendo um <em>buffer</em> da tela. Sendo assim, o primeiro passo é iniciar a sessão do Screen:</p>

<pre>$ screen -S nomedasessao</pre>


<p>Isso criará uma sessão com o nome &ldquo;nomedasessao&rdquo; e será exibido um shell &ldquo;limpo&rdquo;, o que quer dizer que você já está conectado a esta sessão. Para verificar, execute:</p>

<pre>$ screen -ls
There is a screen on:
        8095.nomedasessao   (19-03-2013 23:32:54)   (Attached)
1 Socket in /var/run/screen/S-user.</pre>


<p>A partir de agora, o buffer desta sessão pode ser compartilhado com outro usuário conectado. Basta que seu par se logue no servidor via ssh e execute:</p>

<pre>$ screen -x nomedasessao</pre>


<p>Pronto! O que você digitar, seu par vai ver e vice-versa. Assim, basta abrir o VIM e começar a parear remotamente.</p>

<p>Para se desconectar da sessão atual, execute:</p>

<pre># screen -d
[remote detached from 8095.nomedasessao]</pre>


<h2>Usando o Screen</h2>


<p>O Screen é simples e poderoso. É possível criar abas (window), dividir a tela (split), rolar a tela (copy mode), etc.</p>

<p>Todos comandos começam com Ctrl + a, em seguida o comando ou atalho. Seguem alguns comandos e atalhos que serão muito úteis do seu dia-a-dia pareando:</p>

<p><strong>Copy mode (scroll)</strong>
Inicie o modo de cópia com Ctrl-a + [ (colchete para esquerda)
Navegue pela tela com as setas ou pageup/pagedown;
Marque o início da seleção do texto com &lt;espaço&gt; e termine com &lt;espaço&gt; para copiar;
Cole com Ctrl-a + ] (colchete para direita);</p>

<p><strong>Windows</strong>
Crie uma janela (ou aba) com Ctrl-a + c
Liste as janelas com Ctrl-a + &ldquo; (aspas)
Altere para a janela com Ctrl-a &lt;numero de 0-9&gt;
Feche (ou mate) a janela atual com Ctrl+a k</p>

<p><strong>Split</strong>
Divida a tela horizontalmente com Ctrl-a + S
Divida a tela verticalmente com Ctrl-a + V
Mude de split com Ctrl-a + Tab
Feche um split com Ctrl-a + X</p>

<p>Para digitar um comando: Ctrl-a + :</p>

<p>Consulte o <a title="man screen" href="http://linux.die.net/man/1/screen" target="_blank">manual do Screen</a> para a lista completa de atalhos/comandos.</p>

<h2>Dicas e considerações</h2>


<p>Esta é uma abordagem simplista da utilização do Screen. Deixei vários detalhes de fora do post para tentar ser o mais didático possível. Para informações mais completas como configurações, gerenciamento de sessões e usuários, consulte o <a title="man screen" href="http://linux.die.net/man/1/screen" target="_blank">manual oficial</a>.</p>

<p>Existem outras alternativas como o <a title="tmux" href="http://tmux.sourceforge.net/" target="_blank">tmux</a>, mas o conceito envolvido é o mesmo apresentado aqui.</p>

<p>Se você estiver programando em Rails, provavelmente precisará de 3 contextos: console, server e editor (Vim). Recomendo utilizar cada contexto como &ldquo;window&rdquo; na mesma sessão do Screen.</p>

<p>Utilize o Skype (ou outro voip de sua preferência) durante todo o tempo em que estiverem pareando e estabeleça intervalos. <a title="pomodoro" href="http://www.pomodorotechnique.com/" target="_blank">Pomodoro</a> pode ser uma boa opção.</p>

<p>Dúvidas, críticas ou sugestões nos comentários. Sucesso!</p>

<h2>Referências</h2>


<p><a href="http://www.linux.com/learn/tutorials/442418-using-screen-for-remote-interaction" target="_blank"><a href="http://www.linux.com/learn/tutorials/442418-using-screen-for-remote-interaction">http://www.linux.com/learn/tutorials/442418-using-screen-for-remote-interaction</a>
</a><a href="http://linux.die.net/man/1/screen" target="_blank"><a href="http://linux.die.net/man/1/screen">http://linux.die.net/man/1/screen</a>
</a><a href="http://aperiodic.net/screen/quick_reference" target="_blank"><a href="http://aperiodic.net/screen/quick_reference">http://aperiodic.net/screen/quick_reference</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programação funcional com JavaScript]]></title>
    <link href="http://1up4developers.github.io/blog/2013/02/21/programacao-funcional-com-javascript/"/>
    <updated>2013-02-21T00:00:00-03:00</updated>
    <id>http://1up4developers.github.io/blog/2013/02/21/programacao-funcional-com-javascript</id>
    <content type="html"><![CDATA[<blockquote>"JavaScript is LISP in C's clothing" - Douglas Crockford</blockquote>


<h2>O que é programação funcional</h2>


<p>Programação funcional é, assim como a orientação a objetos, uma forma de se pensar em como resolver problemas.</p>

<p>A base do que hoje é a programação funcional foi criada paralelamente por Alan Turing e Alonzo Church na década de 1930, antes mesmo da existência dos computadores como o conhecemos.</p>

<p>Infelizmente, a programação funcional passou muito tempo restrita aos meios acadêmicos, o que faz com que o iniciante no assunto fique assustado com toda aquela notação matemática e com os termos incompreensíveis.</p>

<pre>ω := λx.x x
Ω := ω ω 
Y := λg.(λx.g (x x)) (λx.g (x x))</pre>


<p>Felizmente, o conceito de programação funcional é muito simples. Assim como na orientação a objetos a menor parte de um sistema é um objeto, você pode atribuir objetos a variáveis, pode passá-los por parâmetro e ter métodos retornando objetos, na programação funcional a menor parte do seu sistema é uma função.</p>

<p>Isso implica que você pode atribuir funções a variáveis, pode passá-las por parâmetro e mesmo fazer com que uma função retorne outra função. Alguma linguagens implementam também imutabilidade, que é quando todo valor é tratado como se fosse uma constante, e outros conceitos periféricos, o que não é o caso do JavaScript. Todos os demais conceitos de programação funcional derivam do fato de você lidar com funções como se fossem um valor como qualquer outro.</p>

<h2>High order functions</h2>


<p>Uma high order function (não achei uma tradução decente para o Português), apesar do nome intimidador, é simplesmente uma função que recebe outra função como parâmetro ou devolve uma função como resultado. Quando você usa callbacks no JavaScript e no jQuery, você está fazendo uso de high order functions.</p>

<pre lang="javascript">$("button.mallandro")
  .click(function() {
    alert("Ié ié!");
  });</pre>


<p>O método <tt>click</tt> é uma high order function, e a função anônima que faz <em>Ié ié!</em> é um callback.</p>

<p>Mais para frente vou mostrar mais formas de usar high order functions.</p>

<h2>Escopo</h2>


<p>Apesar do conceito de escopo não ser exclusivo da programação funcional, é importantíssimo que você entenda como funciona o escopo no JavaScript para que não fique confuso ao ver <em>closures</em> e <em>currying</em>.</p>

<p>Como na maioria das linguagens comerciais, uma variável declarada em um escopo maior é visível em um escopo menor, enquanto o contrário não é verdadeiro.</p>

<p>Na prática significa que uma variável global é visível por todo mundo:</p>

<pre lang="javascript">var x = 1;

function foo() {
  console.log(x);
}

foo();

// Saída:   1</pre>


<p>Significa também que uma variável local só é vista dentro do escopo em que foi criada, mesmo que tenha o mesmo nome de uma variável global:</p>

<pre lang="javascript">
var x = 1;

function bar() {
  var x = 99;
  var y = 42

  console.log(x, y);
}

bar();
// 99 42

console.log(x);
// 1

console.log(y);
// ReferenceError: y is not defined
</pre>


<p>Quando uma função altera o valor de uma variável global, isso afeta toda a aplicação. Por isso o uso de variáveis globais não é considerado uma boa prática. Porém, uma variável global passada por parâmetro para uma função não tem o seu valor alterado:</p>

<pre lang="javascript">
var x = 1;
var y = 11;

function meh(x) {
  console.log("Dentro: ", x, y);
  x++;
  y++;
  console.log("Dentro: ", x, y);
}

meh(x);
// Dentro:  1 11
// Dentro:  2 12

console.log("Fora: ", x, y);
// Fora:  1 12
</pre>




<h2>Closures</h2>


<p>Outra característica do escopo é que uma função guarda as variáveis do contexto em que foi criada. Isso significa que uma função pode continuar acessando variáveis que só existiam no momento em que ela foi criada.</p>

<pre lang="javascript">
function counter() {
  var x = 0;

  return function() {
    return ++x;
  }
}

var count = counter();

console.log(count());
// 1
console.log(count());
// 2
console.log(count());
// 3
console.log(count());
// 4
console.log(x);
// ReferenceError: x is not defined
</pre>


<p>O que acontece aqui é que <tt>count</tt> recebe uma função que incrementa o valor da variável <tt>x</tt>, só que essa variável existe apenas dentro da função <tt>counter</tt>. O que aconteceu aqui é que a função armazenada em <tt>count</tt> <i>se lembra</i> da variável que foi criada em outra função, mas que não está mais sendo executada.</p>

<p>Ao tentarmos exibir o valor da variável <tt>x</tt>, recebemos um erro, pois ela não existe no escopo global.</p>

<h2>Currying</h2>


<p>Juntando tudo o que vimos até aqui sobre high order functions, escopo e closures, chegamos ao <i>currying</i>. Currying é uma operação em que você transforma uma função que receberia mais de um parâmetro em uma série de chamadas de funções com apenas um parâmetro cada.</p>

<p>Um dos usos dessa técnica é evitar, de forma elegante, que o mesmo parâmetro seja passado para a mesma função.</p>

<p>Vamos pegar um exemplo escrito de forma imperativa. Temos uma função <tt>hey</tt>, que recebe os parâmetros <tt>texto</tt> e <tt>nome</tt> e, a partir disso, imprime uma saudação.</p>

<pre lang="javascript">
function hey(texto, nome) {
  console.log(texto + ", " + nome);
}

hey("Bom dia", "João");
// Bom dia, João

hey("Bom dia", "José");
// Bom dia, José

hey("Bom dia", "Nicolau");
// Bom dia, Nicolau
</pre>


<p>Você pode dizer que poderíamos guardar &ldquo;Bom dia&rdquo; em uma variável. Concordo, mas isso não mudaria nada dentro do que estamos apresentando.</p>

<p>Reescrevendo a mesma função usando currying, teremos o código abaixo:</p>

<pre lang="javascript">
function hey(texto) {
  return function(nome) {
    console.log(texto + ", " + nome);
  }
}

var bomDia = hey("Bom dia");

bomDia("João");
// Bom dia, João

bomDia("José");
// Bom dia, José

bomDia("Nicolau");
// Bom dia, Nicolau
</pre>


<p>Programação funcional é muito mais do que os conceitos que apresentei aqui, mas como um primeiro contato já dá para fazer muita coisa bacana.</p>

<p>Recomendo que você estude e pesquise a respeito. Mesmo que você não use uma linguagem funcional no seu dia-a-dia, o fato de conhecer um novo modo de pensar acaba alterando a forma como você resolve problemas, fazendo com que você tenha idéias melhores e mais elegantes.</p>

<p><b>Update em 26/02:</b></p>

<p>Este artigo foi publicado também no iMasters, no endereço <a href="http://imasters.com.br/front-end/javascript/programacao-funcional-com-javascript/" target="_blank"><a href="http://imasters.com.br/front-end/javascript/programacao-funcional-com-javascript/">http://imasters.com.br/front-end/javascript/programacao-funcional-com-javascript/</a></a>.</p>

<p><i>Esse texto é parte do livro <a href="http://www.casadocodigo.com.br/products/livro-javascript-jquery" target="_blank">Dominando JavaScript com jQuery</a>, publicado pela <a href="http://www.casadocodigo.com.br" target="_blank">Editora Casa do Código</a></i>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Tutorial] Configurando o ambiente de desenvolvimento Ruby: RVM]]></title>
    <link href="http://1up4developers.github.io/blog/2011/08/22/tutorial-configurando-o-ambiente-de-desenvolvimento-ruby-rvm/"/>
    <updated>2011-08-22T00:00:00-03:00</updated>
    <id>http://1up4developers.github.io/blog/2011/08/22/tutorial-configurando-o-ambiente-de-desenvolvimento-ruby-rvm</id>
    <content type="html"><![CDATA[<p>Se você ainda não trabalha com <a href="http://www.ruby-lang.org/pt/" target="_blank">Ruby</a> pois acha complicado demais instalá-lo, chega de desculpas! Esse tutorial <del>for dummies</del> ajudará a instalar o Ruby através do <a href="http://beginrescueend.com/" target="_blank">RVM</a> de forma direta, sem enrolação.</p>

<p>Partindo de uma instalação do <a href="http://www.ubuntu.com/" target="_blank">Ubuntu</a> 11.04 zerada, começamos com os pré-requisitos para instalar o RVM:</p>

<pre>user@ubuntu:~$ sudo apt-get install git-core curl</pre>


<p>Basta confirmar a instalação dos pacotes, em seguida executar o comando (extraído do site oficial do RVM):</p>

<pre>user@ubuntu:~$ bash &lt; &lt;(curl -s https://rvm.beginrescueend.com/install/rvm)</pre>


<p>A seguir, o output completo gerado por esse comando indicará os pacotes e libs necessários para a instalação do Ruby.</p>

<pre>(...)

dependencies:
# For RVM
  rvm: bash curl git

# For Ruby (MRI &amp; ree)  you should install the following OS dependencies:
  ruby: /usr/bin/apt-get install <strong>build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake</strong>

(...)

Installation of RVM to /home/user/.rvm/ is complete.</pre>


<p>Agora, basta instalar essas libs através do apt-get:</p>

<pre>user@ubuntu:~$ sudo apt-get install build-essential bison openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake</pre>


<p>Com as dependências instaladas, abra um novo console (para re-carregar o RVM), e comece a instalar o Ruby, no caso, o MRI 1.8.7:</p>

<pre>user@ubuntu:~$ rvm install 1.8.7</pre>


<p>Esta operação levará alguns minutos. Quando concluída, você terá o Ruby 1.8.7 e o <a href="http://rubygems.org/" target="_blank">Rubygems</a> 1.8.6 instalados. Para testar tudo, execute os seguintes comandos:</p>

<pre>user@ubuntu:~$ rvm use --default 1.8.7
Using /home/user/.rvm/gems/ruby-1.8.7-p352</pre>


<pre>user@ubuntu:~$ ruby -v
ruby 1.8.7 (2011-06-30 patchlevel 352) [i686-linux]</pre>


<pre>user@ubuntu:~$ gem -v
1.8.6</pre>


<p>Pronto! Agora você tem o Ruby e Rubygems instalados e prontos para o uso. Caso queira conferir, o output dos comandos acima está disponível <a href="https://gist.github.com/1157378" target="_blank">neste gist</a>.</p>

<p>Fique ligado no próximo post: Gemsets e Bundler. Qualquer dúvida, use os comentários.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usando Bundler com Rails 2.3]]></title>
    <link href="http://1up4developers.github.io/blog/2011/01/17/usando-bundler-com-rails-2-3/"/>
    <updated>2011-01-17T00:00:00-02:00</updated>
    <id>http://1up4developers.github.io/blog/2011/01/17/usando-bundler-com-rails-2-3</id>
    <content type="html"><![CDATA[<p>Iniciando minha participação neste blog, vou apresentar uma solução rápida para um problema que eu tive e levei um certo tempo para encontrar uma resposta.</p>

<p>Caso você não conheça, Bundler é uma ferramenta criada para facilitar a instalação e atualização de aplicações e suas gems, resolvendo facilmente as dependências e criando ambientes homogêneos em máquinas diferentes. Em outras palavras, resolve de uma vez por todas aquele inferno que era ter que baixar gem por gem da sua aplicação e ainda assim correr o risco de encontrar alguma incompatibilidade.</p>

<p>O Rails 3 utiliza o Bundler por padrão, mas aplicações em Rails 2.x ainda dependem das gems declaradas no arquivo <code>config/environment.rb</code>, e ao copiar os arquivos para uma determinada máquina, você é obrigado a usar <code>rake gems:install</code>, que vai levar algum tempo rodando e não vai instalar tudo o que você precisa.</p>

<p>Ou pelo menos era assim que funcionava até você ler esse post.</p>

<p>Primeiro, considerando que você esteja no diretório raiz da sua aplicação, execute a sequência abaixo:</p>

<p>Antes de qualquer outra coisa, instale o Bundler na sua máquina executando o comando <code>gem install bundler</code></p>

<p>No seu arquivo <code>config/boot.rb</code>, imediatamente antes da linha <code>Rails.boot!</code>, insira o bloco abaixo:</p>

<pre lang="ruby">class Rails::Boot
  def run
    load_initializer

    Rails::Initializer.class_eval do
      def load_gems
        @bundler_loaded ||= Bundler.require :default, Rails.env
      end
    end

    Rails::Initializer.run(:set_load_path)
  end
end
</pre>


<p>Crie um arquivo <code>config/preinitializer.rb</code>. Esse arquivo não existe no Rails 2.x, então se você não criar, não vai funcionar. Adicione as linhas abaixo nesse arquivo:</p>

<pre lang="ruby">begin
  require "rubygems"
  require "bundler"
rescue LoadError
  raise "Could not load the bundler gem. Install it with `gem install bundler`."
end

if Gem::Version.new(Bundler::VERSION) <= Gem::Version.new("0.9.24")
  raise RuntimeError, "Your bundler version is too old for Rails 2.3." +
   "Run `gem install bundler` to upgrade."
end

begin
  # Set up load paths for all bundled gems
  ENV["BUNDLE_GEMFILE"] = File.expand_path("../../Gemfile", __FILE__)
  Bundler.setup
rescue Bundler::GemNotFound
  raise RuntimeError, "Bundler couldn't find some gems." +
    "Did you run `bundle install`?"
end
</pre>


<p>Crie um arquivo chamado <code>Gemfile</code> no raiz da sua aplicação. Entre em <code>config/environment.rb</code>, remova todas as instruções config.gem e as adicione no arquivo <code>Gemfile</code> conforme abaixo, sem o prefixo <code>config.</code> (ponto incluído).</p>

<p>Seu arquivo <code>config/environment.rb</code> era assim:</p>

<pre lang="ruby"># Be sure to restart your server when you modify this file

# Specifies gem version of Rails to use when vendor/rails is not present
RAILS_GEM_VERSION = '2.3.10' unless defined? RAILS_GEM_VERSION

# Bootstrap the Rails environment, frameworks, and default configuration
require File.join(File.dirname(__FILE__), 'boot')

Rails::Initializer.run do |config|
  # Settings in config/environments/* take precedence over those specified here.
  # Application configuration should go into files in config/initializers
  # -- all .rb files in that directory are automatically loaded.

  # Add additional load paths for your own custom dirs
  # config.load_paths += %W( #{RAILS_ROOT}/extras )

  # Specify gems that this application depends on and have them installed with rake gems:install
  config.gem "bj"
  config.gem "hpricot", :version => '0.6', :source => "http://code.whytheluckystiff.net"
  config.gem "sqlite3-ruby", :lib => "sqlite3"
  config.gem "aws-s3", :lib => "aws/s3"
  config.gem "authlogic", :version => "=2.1.6"
  config.gem "slim_scrooge", "=1.0.10"

  # Only load the plugins named here, in the order given (default is alphabetical).
  # :all can be used as a placeholder for all plugins not explicitly named
  # config.plugins = [ :exception_notification, :ssl_requirement, :all ]

  # Skip frameworks you're not going to use. To use Rails without a database,
  # you must remove the Active Record framework.
  # config.frameworks -= [ :active_record, :active_resource, :action_mailer ]
end
</pre>


<p>E agora é assim:</p>

<pre lang="ruby"># Be sure to restart your server when you modify this file

# Specifies gem version of Rails to use when vendor/rails is not present
RAILS_GEM_VERSION = '2.3.10' unless defined? RAILS_GEM_VERSION

# Bootstrap the Rails environment, frameworks, and default configuration
require File.join(File.dirname(__FILE__), 'boot')

Rails::Initializer.run do |config|
  # Settings in config/environments/* take precedence over those specified here.
  # Application configuration should go into files in config/initializers
  # -- all .rb files in that directory are automatically loaded.

  # Add additional load paths for your own custom dirs
  # config.load_paths += %W( #{RAILS_ROOT}/extras )

  # Only load the plugins named here, in the order given (default is alphabetical).
  # :all can be used as a placeholder for all plugins not explicitly named
  # config.plugins = [ :exception_notification, :ssl_requirement, :all ]

  # Skip frameworks you're not going to use. To use Rails without a database,
  # you must remove the Active Record framework.
  # config.frameworks -= [ :active_record, :active_resource, :action_mailer ]
end
</pre>


<p>Bem mais limpo, não?</p>

<p>Já o seu recém criado arquivo <code>Gemfile</code> vai ficar assim:</p>

<pre lang="ruby">source 'http://gemcutter.org'
gem "bj"
gem "hpricot", "~> 0.6"
gem "sqlite3-ruby", "~> 1.3.1", :require => "sqlite3"
gem "aws-s3", :lib => "aws/s3"
gem "rails", "= 2.3.10"
gem "authlogic", "~> 2.1.6"

group :development, :test do
  gem 'mongrel', :require => false
end

group :production do
  gem "slim_scrooge", "~> 1.0.10"
end
</pre>


<p>Note que eu criei dois grupos: um com <code>:development, :test</code> e um com <code>:production</code>. Significa que as gems do primeiro grupo somente serão utilizadas em desenvolvimento e em testes, e as do segundo grupo somente serão usadas no ambiente de produção. O que está fora dos grupos será usado em qualquer ambiente.</p>

<p>Agora, finalmente você digita <code>bundle install</code>, aguarda alguns instantes e pronto! A sua aplicação está com todas as gems instaladas e suas devidas dependências.</p>

<p>Para listar as gems utilizadas, execute <code>bundle list</code>.</p>

<p>Sugestões, correções e críticas são bem vindas nos comentários.</p>

<p>Para mais informações, leia a documentação no site do Bundle: <a href="http://gembundler.com/" target="_blank"><a href="http://gembundler.com/">http://gembundler.com/</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guia de Ruby do Why e Autospec-notification]]></title>
    <link href="http://1up4developers.github.io/blog/2009/04/27/guia-de-ruby-do-why-autospec-autotest-notification/"/>
    <updated>2009-04-27T00:00:00-03:00</updated>
    <id>http://1up4developers.github.io/blog/2009/04/27/guia-de-ruby-do-why-autospec-autotest-notification</id>
    <content type="html"><![CDATA[<h2>O comovente guia de Ruby do Why</h2>


<p>Este <a href="http://poignantguide.net/ruby/" target="_blank">livro</a> é sensacional e demonstra exatamente o espírito do Ruby: papo de programador.</p>

<p><a href="http://1up4dev.org/wp-content/uploads/2009/04/thefoxes-3.png"><img class="aligncenter size-full wp-image-463" title="thefoxes-3" src="http://1up4dev.org/wp-content/uploads/2009/04/thefoxes-3.png" alt="" width="500" height="145" /></a></p>

<p>O livro é bem divertido. As tirinhas das raposas são ótimas. Várias <a href="http://www.nomedojogo.com/2008/10/28/why%E2%80%99s-poignant-guide-to-ruby-em-portugues/" target="_blank">pessoas</a> <a href="http://akitaonrails.com/2008/5/14/vamos-traduzir-o-why-s-poignant-guide-to-ruby" target="_blank">contribuíram</a> com a tradução para pt-br que está disponível no <a href="http://github.com/carlosbrando/poignant-br/tree/master" target="_blank">Github</a>.</p>

<p><a href="http://why.nomedojogo.com/" target="_blank">Leitura obrigatória</a>. Chunky bacon!</p>

<h2>Autospec-notification</h2>


<p>O <a href="http://www.nateclark.com/articles/2008/09/17/_autotest_-is-now-_autospec_-how-to-set-up-autospec-for-rspec-and-rails-with-zentest" target="_blank">Autospec</a> é um script gerado pelo <a href="http://rspec.info/" target="_blank">RSpec</a> que utiliza o Autotest para rodar os testes automaticamente a cada alteração no código.</p>

<p>Unindo o útil ao agradável, foi criado o <a href="http://www.mouseoverstudio.com/blog/2008/10/10/autospec-autotest-notification-autospec-notification-e-novidades/" target="_blank">Autospec-notification</a>, que exibe as notificações do autospec no desktop.</p>

<p><a href="http://1up4dev.org/wp-content/uploads/2009/04/sucesso.png"><img class="aligncenter size-full wp-image-465" title="sucesso" src="http://1up4dev.org/wp-content/uploads/2009/04/sucesso.png" alt="" width="500" height="173" /></a></p>

<p>Para instalar, comece pela gem ZenTest:</p>

<pre style="padding-left: 30px;">sudo gem install ZenTest</pre>


<p>No linux, instale o Libnotify:</p>

<pre style="padding-left: 30px;">sudo apt-get install libnotify-bin</pre>


<p>Agora instale a gem do autotest-notification:</p>

<pre style="padding-left: 30px;">sudo gem install carlosbrando-autotest-notification --source=http://gems.github.com</pre>


<p>Ative o autotest-notification e rode o autospec no seu projeto:</p>

<pre style="padding-left: 30px;">an-install</pre>


<pre style="padding-left: 30px;">script/autospec</pre>


<p>O código está no <a href="http://github.com/carlosbrando/autotest-notification/tree/master" target="_blank">Github</a>. Escreva seus testes e divirta-se!</p>
]]></content>
  </entry>
  
</feed>
